<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error <%= errorStatus %></title>
    <style>
        /* Global Styles */
        html, body {
            overflow-x: hidden;
            margin: 0;
            padding: 0;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(135deg, #0d47a1, #42a5f5); /* Gradient Background */
            font-family: "Arial", sans-serif;
            overflow: hidden;
            position: relative;
        }
        .button{
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 10px;
            border-radius: 5px;
            background-color: #fff;
            color: #000;
            text-decoration: none;
            font-weight: bold;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        /* Container Styling with Glassy Metal Effect */
        .container {
            text-align: center;
            background: rgba(255, 255, 255, 0.15); /* Glass effect */
            backdrop-filter: blur(10px); /* Background blur */
            border-radius: 15px;
            box-shadow: 0px 15px 25px rgba(0, 0, 0, 0.3); /* Soft shadow */
            padding: 30px;
            width: 90%;
            max-width: 400px;
            position: relative;
            z-index: 1;
            border: 1px solid rgba(255, 255, 255, 0.2); /* Metallic border */
        }

        /* Title Styles */
        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            color: #fff;
            text-shadow: 1px 1px 10px rgba(0, 0, 0, 0.3);
            letter-spacing: 2px;
        }

        p {
            font-size: 1.5rem;
            color: #fff;
        }

        /* Falling Balls */
        .ball {
            position: absolute;
            border-radius: 50%;
            opacity: 0.7;
            z-index: 0;
        }

        @keyframes fall {
            0% {
                transform: translateY(-100px);
            }
            100% {
                transform: translateY(100vh);
            }
        }

    </style>
    <script src="https://unpkg.com/@dotlottie/player-component@latest/dist/dotlottie-player.mjs" type="module"></script>
</head>
<body>
    <div class="container">
        <dotlottie-player src="https://lottie.host/5a823932-1a14-4813-ae86-cb221ee6394d/sz0ORlQHrT.json"
                          background="transparent"
                          speed="1"
                          style="width: 300px; height: 300px;"
                          loop autoplay>
        </dotlottie-player>
        <h1>Error <%= errorStatus %></h1>
        <p><%= errorMessage %></p>
        <button class="button" onclick="history.back()" >Go Back</button>
    </div>
    <script>
        const colors = ["#e74c3c", "#f1c40f", "#2ecc71", "#fff", "#9b59b6"];
        // Function to create a ball
        function createBall() {
            const ball = document.createElement("div");
            const size = Math.random() * 40 + 20;
            const isLogo = Math.random() > 0.9;

            ball.classList.add("ball");
            ball.style.width = `${size}px`;
            ball.style.height = `${size}px`;
            ball.style.left = `${Math.random() * 100}vw`;
            ball.style.borderRadius = "50%";
            ball.style.position = "absolute";
            ball.style.zIndex = "0";
            ball.style.animation = `fall ${Math.random() * 2 + 3}s linear forwards`;
            // Set logo or random color for the ball
            if (isLogo) {
                ball.style.backgroundImage = "url('/logo.png')";
                ball.style.backgroundSize = "contain";
                ball.style.backgroundRepeat = "no-repeat";
                ball.style.backgroundPosition = "center";
            } else {
                ball.style.backgroundColor =
                    colors[Math.floor(Math.random() * colors.length)];
            }

            document.body.appendChild(ball);
            // Add an event listener to the ball to remove it when the animation is finished
            ball.addEventListener("animationend", () => {
                ball.remove();
            });
        }
        // Set interval to create a new ball every 200ms
        setInterval(createBall, 200);
    </script>
</body>
</html>
